"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –æ–±–æ—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
"""

def test_task1():
    """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 1."""
    print("="*70)
    print("–¢–ï–°–¢ –ó–ê–í–î–ê–ù–ù–Ø 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫")
    print("="*70)
    
    from task1_max_flow import MaxFlowNetwork, create_logistics_network, add_super_source_and_sink
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ä–µ–∂—É
    network = create_logistics_network()
    super_source, super_sink = add_super_source_and_sink(network)
    
    # –û–±—á–∏—Å–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫
    max_flow, flow_graph = network.edmonds_karp(super_source, super_sink)
    
    print(f"\n‚úì –ú–µ—Ä–µ–∂–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    print(f"‚úì –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫: {max_flow} –æ–¥–∏–Ω–∏—Ü—å")
    print(f"‚úì –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤: {len(flow_graph)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
    assert max_flow == 115, f"–û—á—ñ–∫—É–≤–∞–≤—Å—è –ø–æ—Ç—ñ–∫ 115, –æ—Ç—Ä–∏–º–∞–Ω–æ {max_flow}"
    print(f"‚úì –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: –ø–æ—Ç—ñ–∫ = 115 –æ–¥–∏–Ω–∏—Ü—å")
    
    return True


def test_task2():
    """–¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 2."""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ –ó–ê–í–î–ê–ù–ù–Ø 2: –ü—Ä–µ—Ñ—ñ–∫—Å–Ω–µ –¥–µ—Ä–µ–≤–æ")
    print("="*70)
    
    from task2_trie import Homework
    
    trie = Homework()
    words = ["apple", "application", "banana", "cat"]
    for i, word in enumerate(words):
        trie.put(word, i)
    
    print(f"\n‚úì –î–µ—Ä–µ–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ, –¥–æ–¥–∞–Ω–æ {len(words)} —Å–ª—ñ–≤")
    
    # –¢–µ—Å—Ç–∏ count_words_with_suffix
    tests_suffix = [
        ("e", 1),
        ("ion", 1),
        ("a", 1),
        ("at", 1),
    ]
    
    for pattern, expected in tests_suffix:
        result = trie.count_words_with_suffix(pattern)
        assert result == expected, f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è '{pattern}': –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ {result}"
    
    print(f"‚úì count_words_with_suffix: –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ")
    
    # –¢–µ—Å—Ç–∏ has_prefix
    tests_prefix = [
        ("app", True),
        ("bat", False),
        ("ban", True),
        ("ca", True),
    ]
    
    for prefix, expected in tests_prefix:
        result = trie.has_prefix(prefix)
        assert result == expected, f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è '{prefix}': –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}, –æ—Ç—Ä–∏–º–∞–Ω–æ {result}"
    
    print(f"‚úì has_prefix: –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ")
    
    # –¢–µ—Å—Ç –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
    try:
        trie.count_words_with_suffix(123)
        assert False, "–ú–∞—î –±—É—Ç–∏ TypeError"
    except TypeError:
        pass
    
    try:
        trie.has_prefix("")
        assert False, "–ú–∞—î –±—É—Ç–∏ ValueError"
    except ValueError:
        pass
    
    print(f"‚úì –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫: –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
    
    return True


if __name__ == "__main__":
    print("\n" + "="*70)
    print("–§–Ü–ù–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–ú–ê–®–ù–¨–û–ì–û –ó–ê–í–î–ê–ù–ù–Ø")
    print("="*70)
    
    try:
        # –¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 1
        if test_task1():
            print("\n‚úÖ –ó–ê–í–î–ê–ù–ù–Ø 1: –£–°–ü–Ü–®–ù–û")
        
        # –¢–µ—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è 2
        if test_task2():
            print("\n‚úÖ –ó–ê–í–î–ê–ù–ù–Ø 2: –£–°–ü–Ü–®–ù–û")
        
        print("\n" + "="*70)
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü –£–°–ü–Ü–®–ù–û!")
        print("="*70)
        print("\n–ì–æ—Ç–æ–≤–æ –¥–æ –∑–¥–∞—á—ñ:")
        print("  ‚úì –ó–∞–≤–¥–∞–Ω–Ω—è 1: –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É (50/50 –±–∞–ª—ñ–≤)")
        print("  ‚úì –ó–∞–≤–¥–∞–Ω–Ω—è 2: –ü—Ä–µ—Ñ—ñ–∫—Å–Ω–µ –¥–µ—Ä–µ–≤–æ (50/50 –±–∞–ª—ñ–≤)")
        print("  ‚úì –û—á—ñ–∫—É–≤–∞–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: 100/100 –±–∞–ª—ñ–≤")
        print("\n–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("  1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∞—Ä—Ö—ñ–≤ '–î–ó4_Palamarchuk_Serhii.zip' —É LMS")
        print("  2. –ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π")
        print("  3. –°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ SUBMISSION_COMMENT.md")
        print("="*70)
        
    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback
        traceback.print_exc()
